(self.webpackChunk=self.webpackChunk||[]).push([[143],{138:(e,t,i)=>{const a=i(809),{lightningChart:r,AxisTickStrategies:s,emptyLine:n,emptyFill:o,AreaSeriesTypes:l,ColorRGBA:c,PalettedFill:m,LUT:d,emptyTick:u,UIElementBuilders:p,UIOrigins:g,synchronizeAxisIntervals:y,Themes:S}=a,{createProgressiveTraceGenerator:h}=i(27),D={opticalFibreDistanceStep:10,opticalFibreDistanceStart:0,opticalFibreDistanceEnd:3200,timeStep:1e3,timeStart:new Date("2021-06-17T08:54:04").getTime(),timeEnd:new Date("2021-06-17T08:54:38").getTime()},F=D.timeStart,T=new d({interpolate:!1,steps:[{value:0,color:c(0,0,0,0)},{value:200,color:c(96,146,237)},{value:300,color:c(0,0,255)},{value:400,color:c(255,215,0)},{value:500,color:c(255,164,0)},{value:600,color:c(255,64,0)}]}),b=new Promise((async e=>{const t=Math.ceil((D.timeEnd-D.timeStart)/D.timeStep),i=Math.ceil((D.opticalFibreDistanceEnd-D.opticalFibreDistanceStart)/D.opticalFibreDistanceStep),a=await Promise.all(new Array(t).fill(0).map(((e,t)=>h().setNumberOfPoints(i).generate().toPromise().then((e=>e.map((e=>Math.abs(100*e.y)))))))),r=new Array(i).fill(0).map(((e,t)=>({x:D.opticalFibreDistanceStart+t*D.opticalFibreDistanceStep,y:a.reduce(((e,i)=>e+i[t]),0)})));e({traceDataArray:a,areaData:r})})),w=r().Dashboard({numberOfColumns:1,numberOfRows:2}).setRowHeight(0,.3).setRowHeight(1,.7),f=w.createChartXY({rowIndex:0,columnIndex:0}).setTitle("Distance Intensity Chart").setPadding({right:24}),x=f.getDefaultAxisX().setTickStrategy(s.Empty).setStrokeStyle(n),k=f.getDefaultAxisY().setTitle("Intensity Sum"),A=w.createChartXY({rowIndex:1,columnIndex:0}).setTitleFillStyle(o).setPadding({right:24}),I=A.getDefaultAxisX().setTitle("Optical Fiber Distance (m)"),P={hour:"numeric",minute:"numeric",second:"numeric"},O=A.getDefaultAxisY().setTitle("Time").setTickStrategy(s.DateTime,(e=>e.setDateOrigin(new Date(F)).setGreatTickStyle(u).setMinorTickStyle(u).setFormattingDay({},P,{}).setFormattingDecade(P,{}).setFormattingHour({},P,{}).setFormattingMilliSecond({},P).setFormattingMinute({},P,{}).setFormattingMonth({},P,{}).setFormattingSecond({},P).setFormattingWeek({},P,{}).setFormattingYear(P,{})));y(I,x),[k,O].forEach((e=>e.setThickness(100))),b.then((e=>{const{traceDataArray:t,areaData:i}=e,a=(f.addAreaSeries({type:l.Positive}).add(i).setCursorResultTableFormatter(((e,t,i,a)=>e.addRow("Intensity sum:","",a.toFixed(1)).addRow("Optical fiber distance:","",I.formatValue(i)+" m"))),{columns:t[0].length,rows:t.length,start:{x:D.opticalFibreDistanceStart,y:D.timeStart-F},step:{x:D.opticalFibreDistanceStep,y:D.timeStep},dataOrder:"rows"});A.addHeatmapGridSeries(a).setPixelInterpolationMode("disabled").invalidateIntensityValues(t).setFillStyle(new m({lookUpProperty:"value",lut:T})).setWireframeStyle(n).setCursorResultTableFormatter(((e,t,i)=>e.addRow("Intensity:","",i.intensity.toFixed(1)).addRow("Optical fiber distance:","",I.formatValue(i.x)+" m").addRow("Time:","",O.formatValue(i.y)))),I.fit(!1),O.fit(!1),x.fit(!1),k.fit(!1),A.setPadding({bottom:64}),A.addUIElement(p.LUTRange).setLUT(T).setLUTLength(500).setPosition({x:50,y:0}).setOrigin(g.CenterBottom).setAutoDispose({type:"max-width",maxWidth:.8}).setBackground((e=>e.setFillStyle(o).setStrokeStyle(n)))}))}},e=>{e.O(0,[736],(()=>(138,e(e.s=138)))),e.O()}]);